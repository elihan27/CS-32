#include "provided.h"
#include <vector>
#include "MyMap.h"
using namespace std;

class SegmentMapperImpl
{
public:
    SegmentMapperImpl();
    ~SegmentMapperImpl();
    void init(const MapLoader& ml);
    vector<StreetSegment> getSegments(const GeoCoord& gc) const;
private:
    MyMap<GeoCoord, vector<StreetSegment> > m_map;

};

SegmentMapperImpl::SegmentMapperImpl()
{
}

SegmentMapperImpl::~SegmentMapperImpl()
{
}

void SegmentMapperImpl::init(const MapLoader& ml)
{
   /* for(int i=0; i!= ml.getNumSegments(); i++)
    {
        StreetSegment seg;
        ml.getSegment(i, seg);
        GeoCoord end = seg.segment.end;
        GeoCoord start = seg.segment.start;
        
        
    
        
        vector<StreetSegment>* tempA = m_map.find(start); ///this is just for the start
        if (tempA == nullptr)
        {
            vector<StreetSegment> tempA1;
            tempA1.push_back(seg);
            m_map.associate(start, tempA1);
        }
        else
            tempA->push_back(seg);
        
        vector<StreetSegment>* tempB = m_map.find(end); ///this is for the end
        if (tempB == nullptr)
        {
            vector<StreetSegment> tempB1;
            tempB1.push_back(seg);
            m_map.associate(start, tempB1);
        }
        else
            tempB->push_back(seg);
        
        
        for (int j = 0; j!= seg.attractions.size(); j++)
        {
            vector<StreetSegment>* tempC = m_map.find(seg.attractions[j].geocoordinates);
            if (tempC == nullptr)
            {
                vector<StreetSegment> tempC1;
                tempC1.push_back(seg);
                m_map.associate(seg.attractions[j].geocoordinates, tempC1);
            }
            else
                tempC->push_back(seg);
            
        }
     
    }
    */
    
}

vector<StreetSegment> SegmentMapperImpl::getSegments(const GeoCoord& gc) const
{
    
    /*if (m_map.find(gc)==nullptr)
    {
        vector<StreetSegment> temp;
        return temp;
    }
    
    vector<StreetSegment> vec = *m_map.find(gc);
    return vec;
     */
    
    
    vector<StreetSegment> segments;
    return segments;  // This compiles, but may not be correct
  
}

//******************** SegmentMapper functions ********************************

// These functions simply delegate to SegmentMapperImpl's functions.
// You probably don't want to change any of this code.

SegmentMapper::SegmentMapper()
{
    m_impl = new SegmentMapperImpl;
}

SegmentMapper::~SegmentMapper()
{
    delete m_impl;
}

void SegmentMapper::init(const MapLoader& ml)
{
    m_impl->init(ml);
}

vector<StreetSegment> SegmentMapper::getSegments(const GeoCoord& gc) const
{
    return m_impl->getSegments(gc);
}








You probably didn't fuck up!
The location of The Coffee Bean & Tea Leaf is 34.0618, -118.448

Here are all the segments associated with your coordinate:
Segment’s street: South Gretna Green Way
Segment’s start lat/long: 34.0582, -118.479
Segment’s end lat/long: 34.0581, -118.479
This segment has 0 attractions on it.
Segment’s street: Sunset Boulevard
Segment’s start lat/long: 34.0582, -118.479
Segment’s end lat/long: 34.0581, -118.48
This segment has 0 attractions on it.
Segment’s street: Sunset Boulevard
Segment’s start lat/long: 34.0583, -118.479
Segment’s end lat/long: 34.0582, -118.479
This segment has 0 attractions on it.
Program ended with exit code: 0


You probably didn't fuck up!
The location of The Coffee Bean & Tea Leaf is 34.0618, -118.448
Here are all the segments associated with your coordinate:
Segment’s street: Glendon Avenue
Segment’s start lat/long: 34.0582, -118.442
Segment’s end lat/long: 34.0572, -118.442
This segment has 1 attractions on it.
Segment’s street: Wellworth Avenue
Segment’s start lat/long: 34.0575, -118.441
Segment’s end lat/long: 34.0572, -118.442
This segment has 0 attractions on it.
Program ended with exit code: 0


Segment’s street: Glendon Avenue
Segment’s start lat/long: 34.0582, -118.442
Segment’s end lat/long: 34.0572, -118.442
This segment has 1 attractions on it.
Segment’s street: Wellworth Avenue
Segment’s start lat/long: 34.0575, -118.441
Segment’s end lat/long: 34.0572, -118.442
This segment has 0 attractions on it.
Program ended with exit code: 0
